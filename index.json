[{"content":"","date":"2025/03/16","externalUrl":null,"permalink":"/","section":"Oswald's Blog","summary":"","title":"Oswald's Blog","type":"page"},{"content":"","date":"2025/03/16","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" 人可以由自己所经历的事物所定义，你看过的书籍📖、影视📺、遇到的人、从事的职业等等都会影响你的价值观和世界观。 经典书籍 # 大明王朝。（中央与地方、清流与贪官之间的博弈） 影视资料 # leagle high（别名李狗嗨），日剧。一组组案件有趣，法治思维、法庭 ","date":"2025/03/16","externalUrl":null,"permalink":"/posts/resource/","section":"吾生也有涯，而知也无涯","summary":"","title":"经典资源","type":"posts"},{"content":"","date":"2025/03/16","externalUrl":null,"permalink":"/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/","section":"Tags","summary":"","title":"资源分享","type":"tags"},{"content":"","date":"2025/03/15","externalUrl":null,"permalink":"/tags/linux-vps/","section":"Tags","summary":"","title":"Linux VPS","type":"tags"},{"content":"","date":"2025/03/15","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2025/03/15","externalUrl":null,"permalink":"/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/","section":"Tags","summary":"","title":"服务器","type":"tags"},{"content":"","date":"2025/03/15","externalUrl":null,"permalink":"/series/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%BB%BA/","section":"Series","summary":"","title":"服务器自建","type":"series"},{"content":"","date":"2025/03/15","externalUrl":null,"permalink":"/tags/%E7%9E%8E%E6%8A%98%E8%85%BE/","section":"Tags","summary":"","title":"瞎折腾","type":"tags"},{"content":" 推荐的一些自建服务及配置文件 # 1. Alist # 简介：官网为https://alist.nn.ci/，Alist 是一个支持多种存储的目录文件列表程序，支持本地存储、对象存储、网盘等，可以用于离线下载和文件管理。\nservices: alist: image: xhofe/alist:latest container_name: alist volumes: - $PWD/data:/opt/alist/data ports: - \u0026#34;5244:5244\u0026#34; environment: - PUID=1000 - PGID=1000 restart: unless-stopped 2. Aria2 # 简介: Aria2是一个轻量级的多协议命令行下载工具，支持 HTTP、FTP、BitTorrent 等协议，常用于离线下载。\nservices: aria2: image: p3terx/aria2-pro:latest container_name: aria2 volumes: - $PWD/config:/config - $PWD/downloads:/downloads ports: - \u0026#34;6800:6800\u0026#34; environment: - RPC_SECRET=your_secret_key restart: unless-stopped 3. Caddy # 简介:Caddy 是一个现代化的 Web 服务器，支持自动 HTTPS、反向代理等功能，配置简单且性能优秀。\nservices: caddy: image: caddy:latest container_name: caddy volumes: - $PWD/Caddyfile:/etc/caddy/Caddyfile - $PWD/data:/data - $PWD/config:/config ports: - \u0026#34;80:80\u0026#34; - \u0026#34;443:443\u0026#34; restart: unless-stopped 4. Vaultwarden # 简介:Vaultwarden 是 Bitwarden 密码管理器的轻量级实现，兼容 Bitwarden 客户端，适合自建密码管理服务。\nservices: vaultwarden: image: vaultwarden/server:latest container_name: vaultwarden volumes: - $PWD/data:/data ports: - \u0026#34;8080:80\u0026#34; environment: - ADMIN_TOKEN=your_admin_token restart: unless-stopped 5. 青龙脚本 # 简介:青龙脚本是一个支持定时任务的脚本管理平台，常用于京东签到、自动化脚本等。\nservices: qinglong: image: whyour/qinglong:latest container_name: qinglong volumes: - $PWD/config:/ql/config - $PWD/scripts:/ql/scripts - $PWD/log:/ql/log ports: - \u0026#34;5700:5700\u0026#34; environment: - ENABLE_HANGUP=true - ENABLE_WEB_PANEL=true restart: unless-stopped 6. Nextcloud # 简介:Nextcloud是一个自建云存储和协作平台，支持文件存储、日历、联系人、笔记等功能。\nservices: nextcloud: image: nextcloud:latest container_name: nextcloud volumes: - $PWD/data:/var/www/html ports: - \u0026#34;8080:80\u0026#34; environment: - MYSQL_HOST=db - MYSQL_DATABASE=nextcloud - MYSQL_USER=nextcloud - MYSQL_PASSWORD=your_password depends_on: - db restart: unless-stopped db: image: mariadb:latest container_name: nextcloud_db volumes: - $PWD/db:/var/lib/mysql environment: - MYSQL_ROOT_PASSWORD=your_root_password - MYSQL_DATABASE=nextcloud - MYSQL_USER=nextcloud - MYSQL_PASSWORD=your_password restart: unless-stopped 7.Adminer # 简介： Adminer 是一个类似于PHPMyAdmin，主要用于数据库的管理，支持各种类型的数据库，如MySQL、PostSQL、Sqlite 等等。\nservices: # mariadb: # image: mariadb:lts # container_name: mariadb-lts # restart: always # ports: # - \u0026#34;3306:3306\u0026#34; # 将容器的 3306 端口映射到宿主机 # environment: # MYSQL_ROOT_PASSWORD: password # 设置 root 用户密码 # MYSQL_DATABASE: fastapi # （可选）自动创建的数据库 # MYSQL_USER: fast # （可选）创建的普通用户 # MYSQL_PASSWORD: password # （可选）普通用户的密码 # volumes: # - ./data:/var/lib/mysql # 持久化数据到宿主机的 ./data 目录 # # - ./my.cnf:/etc/mysql/my.cnf:ro # （可选）挂载自定义配置文件 adminer: # image: shyim/adminerevo image: adminer container_name: adminer restart: always ports: - \u0026#34;8080:8080\u0026#34; # 将容器的 8080 端口映射到宿主机 # 以下内容仅仅适用SQLite等不设密码的数据库 volumes: - $PWD/one-api.db:/db/one-api.db - $PWD/login-password-less.php:/var/www/html/plugins-enabled/login-password-less.php 当前 Adminer 不支持 sqlite 等不加密的数据库连接，因此需要修改相应的php-plugins。官网给出了三种方法，在这里提供个人认为最简单的方法，即 增加login-password-less.php，实现默认admin密码登录连接。\n\u0026lt;?php require_once(\u0026#39;plugins/login-password-less.php\u0026#39;); /** Set allowed password * @param string result of password_hash */ return new AdminerLoginPasswordLess( $password_hash = password_hash(\u0026#34;admin\u0026#34;, PASSWORD_DEFAULT) ); ","date":"2025/03/15","externalUrl":null,"permalink":"/posts/selfhost/","section":"吾生也有涯，而知也无涯","summary":"","title":"自建服务一览及搭建配置文件","type":"posts"},{"content":" 前言 # VPS或者说服务器，可以理解为一台永不停机的\u0026quot;电脑\u0026quot;。如何配置部署好 VPS 环境，前期积累一些经验，现在将这些经验总结分享，同时也用于个人记录。\n教程设计的命令均在 Debian 11/12 下运行，理论上兼容 Ubuntu。建议在全新的操作系统下执行，仅仅针对于小白。 此处约定: {} 及其括起来的内容为根据你实际情况需要替换的文本内容，括起来的内容为说明，如 ssh {user}@{server ip} 为 ssh 连接服务器的命令，假设用户为 root, 服务器 IP 为 198.56.25.1, 则为 ssh root@198.56.25.1. 具体步骤 # 新机器开荒（可选） # DD 纯净系统 (可选):对于国内厂商的机器，DD 纯净系统几乎是必须做的，以彻底删除阿里云等的机器里面的监控程序.其余的，如果厂商不提供 Debian 11 / 12 镜像或者镜像过于老旧，也可以通过 DD 安装上. 推荐脚本: GitHub - leitbogioro/Tools: Something about tools, 我已简单审查脚本内容. # 安装操作系统属于高级权限，必须使用root账户。 apt update \u0026amp;\u0026amp; apt install curl wget # 国外VPS wget --no-check-certificate -qO InstallNET.sh \u0026#39;https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh\u0026#39; # 国内VPS wget --no-check-certificate -qO InstallNET.sh \u0026#39;https://gitee.com/mb9e8j2/Tools/raw/master/Linux_reinstall/InstallNET.sh\u0026#39; \u0026amp;\u0026amp; chmod a+x InstallNET.sh chmod a+x InstallNET.sh \u0026amp;\u0026amp; ./InstallNET.sh -debian 更新配置源 # 配置更新源 # 养成备份的好习惯: mv /etc/apt/sources.list /etc/apt/sources.list.bak 配置更新源 apt update \u0026amp;\u0026amp; apt upgrade -y \u0026amp;\u0026amp; apt dist-upgrade -y \u0026amp;\u0026amp; apt full-upgrade -y \u0026amp;\u0026amp; apt autoremove -y apt install zsh git curl axel vim htop bat hostnamectl set-hostname {new name} echo \u0026#34;127.0.0.1 {new name}\u0026#34; \u0026gt;\u0026gt; /etc/host 配置SSH # 推荐使用公钥验证登录，抛弃密码和 fail2ban 吧～当然，不方便用公钥的，密码一定要足够强.\nssh-keygen -t ed25519 -C \u0026#34;{密钥注释}\u0026#34; cp ~/.ssh/authorized_keys ~/.ssh/authorized_keys.bak cat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt; ~/.ssh/authorized_keys ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMz2IFBt+FWJc750FHf5hFt7UeXqF4gCet7td+FX5FlX Test EOF 其他需要修改的配置，如修改高位端口号，禁用Root用户登录，禁用密码登录等。 然后重启SSHD服务systemctl restart ssh.service\n注意事项: (千万不要关掉当前终端)请务必另外启动一个终端使用公钥尝试登录进行测试，以验证配置是否成功,成功连接再执行下一步.\n其他注意⚠️事项 # 尽量不要日用 root, 养成使用普通账户然后必要时 sudo 的习惯 (TODO) 不要使用 PHP 等 , 以及相关项目，如 Wordpress, 实在太多安全问题了，非要使用请使用 Docker 隔离。个人对于非自己编写或审查的东西一律 Docker 伺候，最大限度减少攻击面. 谨慎使用第三方脚本 , 脚本里埋雷不是没见过，执行前务必详细检查，让 AI 帮忙也是可以的. 尽量不要使用服务器管理面板，尤其是宝塔等闭源产品，扩大攻击面，自身权限过高. 尽量不使用密码登录 SSH, 请使用密钥登录，且私钥务必设置密码以免被盗用. 结语 # 到这里，新机器就开荒完毕了。有关各类常用应用，如 Docker 等的部署也是常见的，但本文篇幅已经很长了，让我们下期再见！\n附录 # Linux 部署及安全实践指南 ","date":"2025/03/15","externalUrl":null,"permalink":"/posts/vps_init/","section":"吾生也有涯，而知也无涯","summary":"","title":"VPS环境部署常用实践及操作命令","type":"posts"},{"content":"","date":"2025/03/15","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"2025/03/15","externalUrl":null,"permalink":"/tags/shell/","section":"Tags","summary":"","title":"Shell","type":"tags"},{"content":" Zinit 简介 # 自己的配置文件 # # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc. # Initialization code that may require console input (password prompts, [y/n] # confirmations, etc.) must go above this block; everything else may go below. if [[ -r \u0026#34;${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\u0026#34; ]]; then source \u0026#34;${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\u0026#34; fi ### Added by Zinit\u0026#39;s installer if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then print -P \u0026#34;%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f\u0026#34; command mkdir -p \u0026#34;$HOME/.local/share/zinit\u0026#34; \u0026amp;\u0026amp; command chmod g-rwX \u0026#34;$HOME/.local/share/zinit\u0026#34; command git clone --depth 1 https://bgithub.xyz/zdharma-continuum/zinit \u0026#34;$HOME/.local/share/zinit/zinit.git\u0026#34; \u0026amp;\u0026amp; \\ print -P \u0026#34;%F{33} %F{34}Installation successful.%f%b\u0026#34; || \\ print -P \u0026#34;%F{160} The clone has failed.%f%b\u0026#34; fi source \u0026#34;$HOME/.local/share/zinit/zinit.git/zinit.zsh\u0026#34; autoload -Uz _zinit (( ${+_comps} )) \u0026amp;\u0026amp; _comps[zinit]=_zinit # Load a few important annexes, without Turbo # (this is currently required for annexes) zinit light-mode for \\ zdharma-continuum/zinit-annex-as-monitor \\ zdharma-continuum/zinit-annex-bin-gem-node \\ zdharma-continuum/zinit-annex-patch-dl \\ zdharma-continuum/zinit-annex-rust ### End of Zinit\u0026#39;s installer chunk # 加载 powerlevel10k 主题 zinit ice lucid depth=1 zinit light romkatv/powerlevel10k POWERLEVEL9K_INSTANT_PROMPT=quiet # 补全 zinit wait lucid atload=\u0026#34;zicompinit; zicdreplay\u0026#34; blockf for zsh-users/zsh-completions zinit light zsh-users/zsh-completions # 模糊查找 zinit light Aloxaf/fzf-tab # disable sort when completing `git checkout` zstyle \u0026#39;:completion:*:git-checkout:*\u0026#39; sort false # set descriptions format to enable group support zstyle \u0026#39;:completion:*:descriptions\u0026#39; format \u0026#39;[%d]\u0026#39; # set list-colors to enable filename colorizing zstyle \u0026#39;:completion:*\u0026#39; list-colors ${(s.:.)LS_COLORS} # preview directory\u0026#39;s content with eza when completing cd zstyle \u0026#39;:fzf-tab:complete:cd:*\u0026#39; fzf-preview \u0026#39;eza -1 --color=always $realpath\u0026#39; # switch group using `,` and `.` zstyle \u0026#39;:fzf-tab:*\u0026#39; switch-group \u0026#39;,\u0026#39; \u0026#39;.\u0026#39; # 自动建议 zinit ice lucid wait=\u0026#34;0\u0026#34; atload=\u0026#39;_zsh_autosuggest_start\u0026#39; zinit light zsh-users/zsh-autosuggestions # VI-MODE 插件 # zinit ice depth=1 # zinit light jeffreytse/zsh-vi-mode # OTHER plugins zinit light djui/alias-tips # 语法高亮/显示高亮 zinit ice lucid wait=\u0026#39;0\u0026#39; atinit=\u0026#39;zpcompinit\u0026#39; zinit light z-shell/F-Sy-H # 加载 OMZ 框架及部分插件 zinit snippet https://gitee.com/mirrors/oh-my-zsh/raw/master/lib/git.zsh zinit snippet https://gitee.com/mirrors/oh-my-zsh/raw/master/plugins/git/git.plugin.zsh zinit snippet https://gitee.com/mirrors/oh-my-zsh/raw/master/lib/history.zsh zinit snippet https://gitee.com/mirrors/oh-my-zsh/raw/master/lib/key-bindings.zsh zinit snippet https://gitee.com/mirrors/oh-my-zsh/raw/master/lib/completion.zsh zinit snippet https://gitee.com/mirrors/oh-my-zsh/raw/master/lib/clipboard.zsh zinit snippet https://gitee.com/mirrors/oh-my-zsh/raw/master/plugins/aliases/aliases.plugin.zsh zinit snippet https://gitee.com/mirrors/oh-my-zsh/raw/master/plugins/sudo/sudo.plugin.zsh # zinit snippet https://gitee.com/mirrors/oh-my-zsh/raw/master/plugins/autojump/autojump.plugin.zsh # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh. [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh [ -f ~/.fzf.zsh ] \u0026amp;\u0026amp; source ~/.fzf.zsh ######################################################## ##### ALIASES ######################################################## alias ls=\u0026#39;eza\u0026#39; alias ll=\u0026#39;eza -lbF --git\u0026#39; alias la=\u0026#39;eza -lbhHigmuSa --time-style=long-iso --git --color-scale\u0026#39; alias lx=\u0026#39;eza -lbhHigmuSa@ --time-style=long-iso --git --color-scale\u0026#39; alias llt=\u0026#39;eza -l --git --tree\u0026#39; alias lt=\u0026#39;eza --tree --level=2\u0026#39; ## Sorts alias llm=\u0026#39;eza -lbGF --git --sort=modified\u0026#39; alias lld=\u0026#39;eza -lbhHFGmuSa --group-directories-first\u0026#39; alias du=\u0026#39;dust\u0026#39; alias cat=\u0026#39;batcat\u0026#39; alias unzip=\u0026#39;unar\u0026#39; alias rm=\u0026#34;trash-put\u0026#34; ######################################################## ##### 自定义函数区 ######################################################## setopt Autocd #不需要输入cd setopt HIST_IGNORE_ALL_DUPS # 移除重复的命令历史 ","date":"2025/03/15","externalUrl":null,"permalink":"/posts/zinit/","section":"吾生也有涯，而知也无涯","summary":"","title":"Zinit 配置留存备份","type":"posts"},{"content":"","date":"2025/03/15","externalUrl":null,"permalink":"/tags/%E6%95%99%E7%A8%8B%E9%85%8D%E7%BD%AE/","section":"Tags","summary":"","title":"教程配置","type":"tags"},{"content":"123123123\n","date":"2025/03/15","externalUrl":null,"permalink":"/posts/lm_studio/","section":"吾生也有涯，而知也无涯","summary":"","title":"Lm_studio","type":"posts"},{"content":" 🚀 基于 Caddy + Overleaf 社区版的在线 LaTeX 编译服务 # 欢迎使用 LaTeX 在线编译服务！本服务基于开源技术栈搭建，专为需要高效、稳定的 LaTeX 编译体验的用户设计。以下是服务的详细介绍和使用说明：\n🌟 服务概览 # 技术栈：Caddy + Docker + Overleaf 社区版 Docker 性能：部署在甲骨文 ARM64 位服务器上，性能优于 Overleaf 免费版本。 网址：https://latex.baos.eu.org 功能：支持在线编辑和编译 LaTeX 文档，适合论文、报告等场景。 🛠️ 功能说明 # ✅ 支持功能 # 在线编辑和编译 LaTeX 文档。依托甲骨文 ARM64 服务器，编译速度快，用户体验流畅。 支持多用户协作编辑。论文数据完全保密，管理员无法查看用户文档，请放心使用。 基于 Docker 部署，稳定可靠。甲骨文服务器已稳定运行 4 年，可靠性高。 ❌ 缺失功能（社区版限制） # 评论 Review 功能：社区版不支持文档评论功能。 引用检索 Bib 文件自动完成：无法自动完成 Bib 文件引用。 📝 使用指南 # 1. 申请体验 # 如需体验服务，请通过在当前页面评论区留下邮箱，不保证即时反馈，仅能\n2. 验证链接 # 验证链接可能以 http://localhost 开头，请将链接修改为 https://latex.baos.eu.org 后访问。\n📧 联系方式 # 如有任何问题或建议，欢迎通过以下方式联系：\n邮箱：chas5wasl@duck.com GitHub：@Oswald522 网站：https://latex.baos.eu.org 📄 免责声明 # 本服务基于开源技术搭建，功能受社区版限制。 数据安全性依赖于甲骨文服务器，请用户自行备份重要文档。 服务可能会因甲骨文服务器变动而中断，请知悉。 ","date":"2025/03/15","externalUrl":null,"permalink":"/posts/overleaf/","section":"吾生也有涯，而知也无涯","summary":"","title":"分享自搭建的 Latex 服务 (overleaf 社区版)","type":"posts"},{"content":" 说明 # 教程使用基于 docker 的 caddy 实现各类型服务的搭建，具有以下特性：自动 SSL 证书、通配符证书（泛域名）申请，自动续期，易于迁移等功能，基本取代 NGINX 实现高性能反向代理。迁移的化仅仅需要打包当前文件夹，移动到新服务器下重新启动相应服务即可实现。\n前提和基础 # Linux 操作系统，配置好用户名，安装 docker，并确保服务正常运行（运行 docker ps 不会报错）。当前 docker 最新版已经集成 docker-compose，所以不需要重复安装 docker-compose，只是原有的 docker-compose 变更为 docker compose. 新建用户不是必要操作，不过直接使用 root 用户威力过大，使用 test+sudo 可以避免一些权限问题。\n# 以下均在root用户下执行 adduser test #新建一个test用户 export DOWNLOAD_URL=\u0026#34;https://mirrors.tuna.tsinghua.edu.cn/docker-ce\u0026#34; #国内 curl -fsSL https://get.docker.com/ | sh # 如使用 curl # wget -O- https://get.docker.com/ | sh # 如使用 wget usermod -aG sudo,docker test # 将test添加至sudo及docker组当中 newgrp docker #更新用户组 配置 Caddy 服务器。使用普通用户 test 执行如下操作：新建文件夹及相应配置文件。 mkdir /home/test/CaddyWeb \u0026amp;\u0026amp; cd /home/test/CaddyWeb touch access.log .env docker-compose.yaml Caddyfile \u0026amp;\u0026amp; mkdir caddy_data\n提供 caddy 的 docker-compose 配置文件，主要采用 host 模式（必须），占用了 80 和 443 端口，文件内容如下，\n# Path:/home/test/CaddyWeb/docker-compose.yaml services: caddy: image: ghcr.io/caddybuilds/caddy-cloudflare:latest restart: unless-stopped env_file: - $PWD/.env cap_add: - NET_ADMIN # ports: # - \u0026#34;80:80\u0026#34; # - \u0026#34;443:443\u0026#34; # - \u0026#34;443:443/udp\u0026#34; network_mode: host volumes: - $PWD/Caddyfile:/etc/caddy/Caddyfile - $PWD/access.log:/var/log/caddy/access.log - $PWD/caddy_data:/data/caddy 为安全起见，所有的服务 (rss,aria2c,pan,) IP 绑定为 localhost，不为 0.0.0.0，因此不能够通过 IP 地址访问服务；.env 文件存放较为敏感的信息，如域名、Cloudflare Token 等.Caddyfile 配置文件也比较简单，此处实现泛域名证书，需要提前设置相应子域名 DNS 解析。\n# Path:/home/test/CaddyWeb/.env SERVER_NAME=\u0026#34;example.com\u0026#34; CLOUDFLARE_API_TOKEN=\u0026#34;自行修改\u0026#34;` # Path:/home/test/CaddyWeb/Caddyfile { order reverse_proxy before route admin off log { output file /var/log/caddy/access.log { roll_size 100mb roll_keep 5 roll_keep_for 4320h } } #证书自动申请续期。 acme_dns cloudflare {env.CLOUDFLARE_API_TOKEN} } # 泛域名设置 *.{$SERVER_NAME} {$SERVER_NAME} { #root * /var/www/html file_server encode gzip @root host {$SERVER_NAME} # 从上往下模式匹配,默认则为最后一项： aria2c: https://example.com/jsonrpc 端口号为443不为6800; # handle @root { reverse_proxy /jsonrpc localhost:6800 # aria2c 配置设置 reverse_proxy /Seick localhost:65178 # 奇怪的伪装Path的服务 reverse_proxy /frac localhost:27015 # 异星工厂服务器 reverse_proxy localhost:22303 # chagpt } # 此处注意标签@pan ,访问网址为 pan.example.com，需要提前解析pan 子域名 @pan host pan.{$SERVER_NAME} handle @pan { reverse_proxy localhost:5244 #Alist服务 } @latex host latex.{$SERVER_NAME} handle @latex { reverse_proxy localhost:8085 # latex服务 } @admin host admin.{$SERVER_NAME} handle @admin { reverse_proxy localhost:38574 #1panel服务 } @rss host rss.{$SERVER_NAME} handle @rss { reverse_proxy localhost:8080 #freshrss } } 搭建各类型服务 # 使用搭建各类型服务。自行查找相关服务的配置文件。使用 airia2c 举例来说：\n# Path:/home/test/aria2down/docker-compose.yaml services: Aria2-Pro: container_name: aria2-pro image: p3terx/aria2-pro environment: - PUID=65534 - PGID=65534 - UMASK_SET=022 - RPC_SECRET=P3TERX - RPC_PORT=6800 - LISTEN_PORT=6888 - DISK_CACHE=64M - IPV6_MODE=false - UPDATE_TRACKERS=true - CUSTOM_TRACKER_URL= - TZ=Asia/Shanghai volumes: - ${PWD}/aria2-config:/config #需要提前在目录中新建 aria2-config和 aria2-downloads 文件夹 - ${PWD}/aria2-downloads:/downloads ports: - 127.0.0.1:6800:6800 # 没有使用 - 6800(可以任意选取，但是必须与Caddyfile反向代理的端口一致):6800 是基于安全考虑, - 127.0.0.1:6888:6888 - 127.0.0.1:6888:6888/udp restart: unless-stopped logging: driver: json-file options: max-size: 1m 在使用 Docker Compose 管理服务时，通常需要在 docker-compose.yaml 文件所在的目录下（如 /home/test/CaddyWeb 或者 /home/test/aria2down）执行命令。以下是一些常用的 Docker Compose 命令及其说明：\ndocker ps # 查看当前服务的状态 docker compose up # 在首次运行或进行重大更改后，建议先使用 docker compose up（不带 -d）来启动服务并观察输出，确保一切正常后再使用后台模式。 docker compose up -d # 后台运行服务，按照设置完全不需要在进行管理，重启主机后等服务跟随docker自动启动 docker compose down # 停止并移除所有容器、网络 docker compose stop # 停止服务但不删除容器 docker compose start # 启动已停止的服务 docker compose restart {服务名称} # 仅仅修改挂载的配置文件,如果存在多个子服务的话重启单个子服务需要提供名称(Aria2-Pro) docker compose down --rmi all --volumes --remove-orphans # 删除所有未使用的容器、网络和镜像 注意事项 # 当前使用的具有 docker 运行权限的 test 用户，配置文件夹放在当前用户目录下。如果使用 1panel，可以直接在 1panel 下运行部署相关服务。 部分内容 (docker 用法、镜像下载及 cloudflare API Token 申请等) 介绍不太详细，网上参考资料比较多，可以自行查询。国外服务器的话按照配置教程，完全不存在任何问题。CF 可以改用其他的 DNS 解析，如阿里、腾讯等等，此时可能需要修改相关的镜像及配置 Token 等。 caddy 申请的证书保存在 /home/test/CaddyWeb/caddy_data 当中，权限设置需要 root 用户进行查看。 如果不习惯命令行，推荐使用 1panel 面板（类似于宝塔等）的方式，界面轻量化，系统占用较低，可以管理相应的服务。 主流需要的服务大多提供了 docker-compose 的配置方式。个人常用的服务主要有：freshrss、aria2c、latex、alist、chat-acad,new-api 等。 在首次运行或进行重大更改后，建议先使用 docker compose up（不带 -d）来启动服务并观察输出，确保一切正常后再使用后台模式。如果只修改了挂载的配置文件，通常只需要重启相关服务即可，可以使用 docker compose restart \u0026lt;service_name\u0026gt;。 ","date":"2025/03/15","externalUrl":null,"permalink":"/posts/docker_caddy/","section":"吾生也有涯，而知也无涯","summary":"","title":"使用docker搭建服务简易教程","type":"posts"},{"content":"","date":"2025/03/15","externalUrl":null,"permalink":"/series/%E8%87%AA%E5%BB%BA%E6%9C%8D%E5%8A%A1/","section":"Series","summary":"","title":"自建服务","type":"series"},{"content":" 摘要 # 内容和代码测试 # 测试数据 # 这一一篇测试文档，用于测试和记录相关的代码信息sdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfa\nimport os ","date":"2025/03/15","externalUrl":null,"permalink":"/posts/blog_create_3/","section":"吾生也有涯，而知也无涯","summary":"","title":"Blog_create_3","type":"posts"},{"content":"","date":"2025/03/15","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025/03/15","externalUrl":null,"permalink":"/categories/good/","section":"Categories","summary":"","title":"Good","type":"categories"},{"content":"","date":"2025/03/15","externalUrl":null,"permalink":"/tags/%E9%BB%98%E8%AE%A4/","section":"Tags","summary":"","title":"默认","type":"tags"},{"content":"看过一些书，读过一些故事，折腾过一些有意思的玩意。\n","date":"2025/03/14","externalUrl":null,"permalink":"/posts/","section":"吾生也有涯，而知也无涯","summary":"","title":"吾生也有涯，而知也无涯","type":"posts"},{"content":" 全文转载自 TARESKY 写于 2019-03-17 13:49:17 最近购车了，遇到一些坑，或者说潜规则。前期做的功课不多，网上的攻略也不够好，值得花时间整理和分享出来。\n在正文开始之前，有两个观点需要先阐明：\n即使买了车，我仍认为：在国内人力成本低廉的前提下，大部分人不需要购车，打车是一件性价比极高事情。另一方面，有车会改变生活状态，即所谓拓宽了生活半径，哪怕这个时候打车性价比依然高，但有车这件事会默默影响人的出行决策。 总结出这些坑，并不能让你跳过它们。而是获得这些信息后，能帮助你更好的选择，选择踩哪些坑。 选车 # 由于决定购车前对车一无所知，连需求和预算都是一边了解一边改变。在刷了几天主流车评的视频文章，和身边已经购车的同事讨论后，大致弄清楚自己需求：1. 轿车；2. 必须有 acc（自适应巡航）；3. 优先两田混动。一番纠结最终选定本田 inspire 混动高配。\n出于驾驶经验不足和时间关系，我并没有试驾过任何车型，完全靠外部信息来决策，是非常错误的，“这一点提出明确批评”。选车最重要的是试驾，一定要去试驾。\n定车 # 首先，推荐在5-6月或11-12月购车，车企调整或冲量。更推荐在月末购车，销售个人业绩关卡。 拿起电话，给本市和周边城市的所有4S店询价。需要表达的关键信息：车我选定了，就找你砍价；钱我多的是，随时能提车；距离不是问题，异地也考虑；时间不是问题，慢慢等优惠；永远没空去店里，要谈电话谈。大约需要2小时，对优惠幅度有了初步概念，也明确哪些销售人员值得进一步谈。如果还有精力，可以电话到车行，价格更低一些，当然也更接近4S的底价。 如果决定本地买，务必留足一天的时间。在你踏入4S店的那一刻，已经陷入了被动，付出的时间成本会在潜意识里催促你赶紧决定，这也是为什么所有销售都会建议你到店谈。请克制自己完成任务的欲望，走遍所有计划过的4S店。同理，异地提车心理劣势更大，建议留足2-3天的时间。 现场谈价的要点和电话部分基本一样，让销售确信你下一分钟就可以付款，阻挡他完成这笔订单的只有价格。另外赠品的实际价格大概是销售所说的 10%-20%，尽量拒绝，要现金优惠。 永远以落地车价为准，落地价包含：裸车价+交强险+商业险+购置税+上牌费+其他费用（贷款服务费/出库费/强制消费）。 4S店愿意降低裸车价，而提高其他费用，因为其他费用全是毛利润； 部分4S店会强制你在店内买保险，因为这部分回扣就入了他们口袋，如果你自己找保险电销购买，基本可以五折搞定； 上牌本地可以自己去，外地自己找黄牛上牌和4S店推荐的比价； 其他费用得靠自己谈，不合理也没有强买强卖。我们的目的是省钱，不是改变行业规则，不为这些破事生气。 定车合同一定是不规范的，比如不写承诺提车时间，不写4S的违约责任，只写了你的违约责任。哪怕强烈要求补充在合同内，大部分4S店也不会同意。于是需要自己留存证据以备不时之需，一是4S销售的沟通记录，二是现场录音。其中现场录音需要注意，必须从进店之前开始录制，完整的、包含销售人员的、且包含店内其他工作人员的录音（比如销售经理），防止4S店以销售个人承诺不代表公司而推脱。面对可能的遥遥无期等车，至少为自己退全额定金留条路。 如果你是付全款，一定要先看到车辆合格证，并在付款之后立即拿走。车辆合格证厂家随车给到4S店，随后会被4S店拿去银行抵押贷款。如果你交的钱用来赎回合格证，一般3天内可以提车。最坏情况，如果4S店挪用了你的钱，出现债务出现问题无法赎车，那么你的钱和车都泡汤了。建议同上一条，合同明确交付合格证的时间，或录音。 合同签字前，看完全文，异议的部分录音讨论。签字后，不要让合同离开自己视线，4S店会找借口拿走所有合同，偷偷修改对他们不利的内容。因此合同还给你之后，务必再次重新核对。有些人觉得签字前认真看过了，这份就直接收了（包括我），吃了暗亏。 建议受不了气的朋友全款购车。如果走贷款，证件均在银行和4S店手里，你将无法做任何反抗，他们坑你、拖你、骗你也只能承受。 反手 # 第一次购车，经验不足我也吃亏了，最终合同多出来一个3000服务费。虽然总价是我同意的那个，但这种欺骗行为让我觉得很恶心。针对服务费这个问题，我打电话给销售，引导他说出了出库费、PDI检测费等禁止出现的费用并录音，提车时要了这部分发票。理论上去投诉有不小的胜算，但异地购车投诉的时间成本太高了作罢。\n还有一个更高效的报复办法：保险退保，然后自己重买。 交强险无法退保，商业险可以。只要你挂牌完毕，合格证交给车管所存档后，4S店和你已经没有半点瓜葛了。商业险在全国任何一个柜台都可以办理退保，保险公司必须无条件同意，已保费用按天收取，带着你的身份证前往即可。以我的商业险费用举例：4S购买6846元=车损+三者100万；自己买5345元=车损+三者100万+玻璃险+500万车上人员险+700元联华超市卡（680出了）+2次小保养+4个划痕面+2次市内代驾。粗略算比之前优惠了 2500 元以上，至于4S店与合作的保险公司怎么撕也与我无关了。\nOne More Thing # 保险建议只买车损+三者（100万以上）+玻璃险。划痕险留到第四年第五年再买，补的钱不多。 如果把车辆合格证交给车管所之前，拍照留存了一张。那么恭喜你，你可以购买超低价保险（3折-4折）。原理是各大保险公司在四川地区大力推广，因此该地区投保价格低得可怕，网上找一些办法可以异地投保，理论上不影响理赔和使用。 附录 # TARESKY ","date":"2025/03/09","externalUrl":null,"permalink":"/posts/buy_car/","section":"吾生也有涯，而知也无涯","summary":"","title":"[转载]购车踩坑之旅","type":"posts"},{"content":"","date":"2025/03/09","externalUrl":null,"permalink":"/tags/%E7%BB%8F%E9%AA%8C%E8%BD%AC%E8%BD%BD/","section":"Tags","summary":"","title":"经验转载","type":"tags"},{"content":"","date":"2025/03/09","externalUrl":null,"permalink":"/tags/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/","section":"Tags","summary":"","title":"日常记录","type":"tags"},{"content":" 前言 # 作为一个技术爱好者，我一直想拥有一个既简洁又高效的个人博客。这次重构博客，我将重点放在了速度、编辑体验和工作流的顺畅性上。经过一番调研，我选择了Hugo作为静态网站生成器，搭配Blowfish主题，并使用Cloudflare Pages进行部署和域名管理。下面，我将详细记录整个搭建过程。\n教程基础及前言 # 在开始之前，确保你已经具备以下基础：\nGit：用于版本控制和代码管理。 Hugo：一个快速、灵活的静态网站生成器。 GitHub账号：用于托管代码和版本管理。 Cloudflare账号：用于部署和域名管理。 1. Hugo 新建项目 # 首先，安装Hugo。如果你还没有安装，建议直接访问Hugo Release选择相应的版本进行下载安装。然后，创建一个新的Hugo项目：\nhugo new site my-blog # my-blog 是项目的名称 cd my-blog 2. 安装主题（Git Submodule方法） # Blowfish是一个简洁、现代的Hugo主题。为了便于更新和管理，我们使用Git Submodule方法安装主题。\ngit init git submodule add https://github.com/nunocoracao/blowfish.git themes/blowfish 接下来，将主题的示例配置复制到项目根目录，删除根目录当中的hugo.toml文件：\ncp themes/blowfish/exampleSite/config/* . 编辑config.toml文件，根据你的需求进行个性化配置。\n3. 主题相关配置 # Blowfish主题提供了丰富的配置选项，可以通过编辑config.toml文件来定制博客的外观和功能。以下是一些常见的配置项：\nbaseURL = \u0026#34;https://yourdomain.com\u0026#34; title = \u0026#34;我的博客\u0026#34; theme = \u0026#34;blowfish\u0026#34; [params] description = \u0026#34;这是我的个人博客，分享技术经验和生活感悟。\u0026#34; author = \u0026#34;你的名字\u0026#34; favicon = \u0026#34;favicon.ico\u0026#34; 4. 配置域名 # 4.1 上传至GitHub进行历史版本管理 # 首先，将项目推送到GitHub仓库：\ngit add . git commit -m \u0026#34;Initial commit\u0026#34; git branch -M main git remote add origin https://github.com/yourusername/my-blog.git git push -u origin main 4.2 使用Cloudflare Pages实现在线发布及域名访问 # 登录Cloudflare，进入Pages页面，选择“Create a project”。 连接到你的GitHub仓库，选择刚刚推送的my-blog项目。 在构建设置中，选择Hugo作为框架，并设置构建命令为hugo，输出目录为public。 点击“Save and Deploy”开始部署。 部署完成后，Cloudflare会提供一个默认的.pages.dev域名。如果你有自己的域名，可以在Cloudflare的DNS设置中添加CNAME记录，将你的域名指向Cloudflare Pages提供的域名。\n附录 # 以下是一些参考教程和资源，可以进一步学习和探索：\nHugo官方文档 Blowfish主题官方文档 Cloudflare Pages官方文档 希望这篇教程能帮助你顺利搭建自己的博客网站。如果有任何问题或建议，欢迎在评论区留言讨论。\n","date":"2023/10/18","externalUrl":null,"permalink":"/posts/hugo_website/","section":"吾生也有涯，而知也无涯","summary":"","title":"基于Hugo+Blowfish主题搭建的博客网站","type":"posts"},{"content":"","date":"2023/10/18","externalUrl":null,"permalink":"/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/","section":"Tags","summary":"","title":"技术分享","type":"tags"},{"content":"","date":"2023/10/18","externalUrl":null,"permalink":"/series/%E5%BB%BA%E7%AB%99%E6%8A%80%E6%9C%AF/","section":"Series","summary":"","title":"建站技术","type":"series"},{"content":"","date":"2023/10/18","externalUrl":null,"permalink":"/tags/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/","section":"Tags","summary":"","title":"经验记录","type":"tags"},{"content":"","date":"2022/03/16","externalUrl":null,"permalink":"/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","section":"Tags","summary":"","title":"计算机网络","type":"tags"},{"content":" 前言 # 异地组网是相当实际的需求，比如远程联机游戏、办公、随时随地回家连接NAS等。\n以下是关于异地组网工具 ZeroTier、EasyTier 和 OpenVPN 的详细补充内容，包括功能类型、官网地址、优点、缺点以及适配的操作系统。\n工具一览表 # 名称 官网地址 仓库地址 优点 缺点 适配操作系统 ZeroTier https://www.zerotier.com Github - 配置简单，只需安装客户端并加入网络即可\n- 支持跨平台\n- 自动 NAT 穿透，无需公网 IP - 免费版限制 25 个设备\n- 依赖 ZeroTier 中央服务器，可能存在隐私问题 Windows、macOS、Linux、Android、iOS EasyTier https://easytier.cn Github - 支持多协议（如 WireGuard、OpenVPN）\n- 提供 Web 管理界面，易于配置\n- 支持多设备组网 - 需要订阅付费服务\n- 配置灵活性较低，依赖服务商提供的功能 Windows、macOS、Linux、Android、iOS OpenVPN https://openvpn.net - 开源免费，高度可定制\n- 支持多种加密协议\n- 适合复杂网络环境，安全性高 - 配置复杂，需要手动生成证书和配置文件\n- 需要公网 IP 或动态域名服务（DDNS）支持 Windows、macOS、Linux、Android、iOS 其他需要注意的问题⚠️ # 1. 网络延迟 # 异地组网的延迟取决于服务器和客户端之间的物理距离，选择靠近用户的地理位置的服务器可以降低延迟。 使用 NAT 穿透技术（如 ZeroTier）可以减少延迟，但某些网络环境下仍可能出现较高的延迟。 2. 安全性 # 确保使用强加密协议（如 WireGuard、OpenVPN 的 AES-256）来保护数据传输。 定期更新客户端和服务端软件，修复已知的安全漏洞。 3. 设备数量限制 # 免费版的 ZeroTier 限制 25 个设备，如果需要更多设备，需升级到付费计划。 OpenVPN 没有设备数量限制，但需要自行搭建服务器，可能增加管理成本。 4. 公网 IP 需求 # OpenVPN 和 EasyTier 通常需要公网 IP 或动态域名服务（DDNS）来建立连接。 ZeroTier 不需要公网 IP，但依赖其中央服务器进行 NAT 穿透。 5. 带宽限制 # 异地组网的带宽受限于服务器和客户端的网络连接质量。 如果组网用于传输大文件或视频流，建议选择高带宽的服务器或优化网络设置。 6. 跨平台兼容性 # ZeroTier 和 EasyTier 提供跨平台支持，适合需要在不同设备之间组网的场景。 OpenVPN 也支持跨平台，但不同平台的客户端配置可能略有不同。 7. 隐私问题 # ZeroTier 和 EasyTier 依赖于中央服务器，可能涉及隐私问题。如果需要更高的隐私保护，建议使用 OpenVPN 并自行搭建服务器。 8. 动态 IP 处理 # 如果客户端或服务器使用动态 IP，建议配置动态域名服务（DDNS）以确保连接稳定性。 9. 网络配置 # 某些路由器或防火墙可能阻止 VPN 流量，需要手动配置端口转发或防火墙规则。 例如，OpenVPN 默认使用 UDP 1194 端口，ZeroTier 使用 UDP 9993 端口。 总结 # ZeroTier 适合初学者和简单场景，配置简单但设备数量受限。 EasyTier 提供更丰富的功能和 Web 管理界面，适合需要多协议支持的用户。 OpenVPN 适合高级用户和复杂网络环境，安全性高但配置复杂。 根据实际需求选择合适的工具，并注意上述问题以确保组网的稳定性和安全性。如果有其他问题，欢迎随时提问！ 😊\n","date":"2022/03/16","externalUrl":null,"permalink":"/posts/network_link/","section":"吾生也有涯，而知也无涯","summary":"","title":"异地实现局域网组网","type":"posts"},{"content":" good # 测试代码\nimport os This is a good file to test\ngood This is agood test\n","date":"2020/03/09","externalUrl":null,"permalink":"/posts/hellow_world/","section":"吾生也有涯，而知也无涯","summary":"","title":"测试文章","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":" 免责声明 # 本网站上所记录的内容可能因时间、地区的不同而造成有效性的缺失或者改变，任何因参考本站内容或有关内容引起的直接、间接损失或损害，博主均不负责。无论成年与否，请自担风险，对自己负责。\n许可协议 # 本站使用 Hugo 构建，相关代码和服务继承原项目的License：\nHugo： Apache License 2.0 Blowfish： MIT License 除非另有特殊说明，否则 本站 所有内容均在 署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 许可下授权。\n以下是该许可证的人类可读摘要（而不是替代）： 您可以自由地 # 共享 — 在任何媒介以任何形式复制、发行本作品 演绎 — 修改、转换或以本作品为基础进行创作 只要你遵守许可协议条款，许可人就无法收回你的这些权利。 惟须遵守下列条件 # 署名 — 您必须给出 适当的署名，提供指向本许可协议的链接，同时 标明是否（对原始作品）作了修改。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。 非商业性使用 — 您不得将本作品用于 商业目的。 相同方式共享 — 如果您再混合、转换或者基于本作品进行创作，您必须基于 与原先许可协议相同的许可协议 分发您贡献的作品。 没有附加限制 — 您不得适用法律术语或者 技术措施 从而限制其他人做许可协议允许的事情。 侵权声明 # 如果本网站的任何内容无意中侵犯了您的版权或利益，请及时与我联系。\n电子邮箱地址为chas5wasl@duck.com，暂不支持其他联系，一般会在一周内做出回复。\n","externalUrl":null,"permalink":"/copyright/","section":"Oswald's Blog","summary":"","title":"版权声明","type":"page"},{"content":" 关于此博客 # 社交平台愈多，留不住心头闪念\n世间白云苍狗，遗忘是大多数的选择\n人事纷繁复杂，我想回头时能看见来时的路\n所以想记录，所以想对抗，所以想诚实的成长\n关于我 # 计算机从业者，爱好系统编程，自我评价MBTI类型为INTJ，不想做个好人，也没做什么坏事\n","externalUrl":null,"permalink":"/about/","section":"Oswald's Blog","summary":"","title":"关于","type":"page"},{"content":" 找到其他的小伙伴 # ","externalUrl":null,"permalink":"/links/","section":"Oswald's Blog","summary":"","title":"友情链接🔗","type":"page"}]